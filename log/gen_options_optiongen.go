// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package log

type Options struct {
	Debug       bool
	ProcessID   string
	LogDir      string
	LogFileName func(logdir, prefix, processID, suffix string) string
	BiDir       string
	BIFileName  func(logdir, prefix, processID, suffix string) string
	BiSetting   map[string]interface{}
	LogSetting  map[string]interface{}
}

func (cc *Options) SetOption(opt Option) {
	_ = opt(cc)
}

func (cc *Options) ApplyOption(opts ...Option) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *Options) GetSetOption(opt Option) Option {
	return opt(cc)
}

type Option func(cc *Options) Option

func WithDebug(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.Debug
		cc.Debug = v
		return WithDebug(previous)
	}
}

func WithProcessID(v string) Option {
	return func(cc *Options) Option {
		previous := cc.ProcessID
		cc.ProcessID = v
		return WithProcessID(previous)
	}
}

func WithLogDir(v string) Option {
	return func(cc *Options) Option {
		previous := cc.LogDir
		cc.LogDir = v
		return WithLogDir(previous)
	}
}

func WithLogFileName(v func(logdir, prefix, processID, suffix string) string) Option {
	return func(cc *Options) Option {
		previous := cc.LogFileName
		cc.LogFileName = v
		return WithLogFileName(previous)
	}
}

func WithBiDir(v string) Option {
	return func(cc *Options) Option {
		previous := cc.BiDir
		cc.BiDir = v
		return WithBiDir(previous)
	}
}

func WithBIFileName(v func(logdir, prefix, processID, suffix string) string) Option {
	return func(cc *Options) Option {
		previous := cc.BIFileName
		cc.BIFileName = v
		return WithBIFileName(previous)
	}
}

func WithBiSetting(v map[string]interface{}) Option {
	return func(cc *Options) Option {
		previous := cc.BiSetting
		cc.BiSetting = v
		return WithBiSetting(previous)
	}
}

func WithLogSetting(v map[string]interface{}) Option {
	return func(cc *Options) Option {
		previous := cc.LogSetting
		cc.LogSetting = v
		return WithLogSetting(previous)
	}
}

func NewOptions(opts ...Option) *Options {
	cc := newDefaultOptions()

	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogOptions != nil {
		watchDogOptions(cc)
	}
	return cc
}

func InstallOptionsWatchDog(dog func(cc *Options)) {
	watchDogOptions = dog
}

var watchDogOptions func(cc *Options)

func newDefaultOptions() *Options {

	cc := &Options{}

	for _, opt := range [...]Option{
		WithDebug(false),
		WithProcessID(""),
		WithLogDir(""),
		WithLogFileName(func(logdir, prefix, processID, suffix string) string {
			return ""
		}),
		WithBiDir(""),
		WithBIFileName(func(logdir, prefix, processID, suffix string) string {
			return ""
		}),
		WithBiSetting(make(map[string]interface{}, 0)),
		WithLogSetting(make(map[string]interface{}, 0)),
	} {
		_ = opt(cc)
	}

	return cc
}
